/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package loginandsignup;

import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import static loginandsignup.Message_1.checkRecipientCell;
import static loginandsignup.Message_1.createMessageHash;
import static loginandsignup.Message_1.generateMessageID;
import static loginandsignup.Message_1.messageCounter;
import static loginandsignup.Message_1.messages;
import static loginandsignup.Message_1.returnTotalMessages;
import static loginandsignup.Message_1.storeMessageToJSON;

/**
 *
 * @author RC_Student_lab
 */
public class MessageMenu extends javax.swing.JFrame {

    /**
     * Creates new form MessageMenu
     */
    public MessageMenu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Send message");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("view message");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("exit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Calibri Light", 3, 18)); // NOI18N
        jLabel1.setText("welcome to quick chats");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton2)
                                .addComponent(jButton1))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(jButton3)))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(48, 48, 48)
                .addComponent(jButton1)
                .addGap(32, 32, 32)
                .addComponent(jButton2)
                .addGap(29, 29, 29)
                .addComponent(jButton3)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       sendMessages();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       Message_1.printMessages();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
      JOptionPane.showMessageDialog(this, "Goodbye!");
    System.exit(0);
    }//GEN-LAST:event_jButton3ActionPerformed
private void sendMessages() {
        String fullName;
        do {
            fullName = JOptionPane.showInputDialog(this, "Enter recipient's full name (e.g., John Smith):");
            if (fullName == null) return;
            if (!fullName.matches("[A-Z][a-z]+ [A-Z][a-z]+")) {
                JOptionPane.showMessageDialog(this, "Name must be in format: John Smith");
            }
        } while (!fullName.matches("[A-Z][a-z]+ [A-Z][a-z]+"));

        String number;
        do {
            number = JOptionPane.showInputDialog(this, "Enter recipient number (starts with +27):");
            if (number == null) return;
            if (!checkRecipientCell(number)) {
                JOptionPane.showMessageDialog(this, "Invalid number. Must start with +27 and be max 13 characters.");
            }
        } while (!checkRecipientCell(number));

        int msgCount = 0;
        while (msgCount <= 0) {
            try {
                String countStr = JOptionPane.showInputDialog(this, "How many messages do you want to send to " + fullName + "?");
                if (countStr == null) return;
                msgCount = Integer.parseInt(countStr);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Please enter a valid number.");
            }
        }

        for (int i = 1; i <= msgCount; i++) {
            // DEBUG: show which message weâ€™re on
            System.out.println("Sending message " + i + " of " + msgCount);

            String messageText;
            do {
                messageText = JOptionPane.showInputDialog(this, "Enter message " + i + ":");
                if (messageText == null) return;
                if (messageText.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Message cannot be empty.");
                } else if (messageText.length() > 250) {
                    JOptionPane.showMessageDialog(this, "Message too long by " + (messageText.length() - 250) + " characters.");
                }
            } while (messageText.trim().isEmpty() || messageText.length() > 250);

            // Process message
            String result = sendMessageFlowWithInputs(number, messageText);
            JOptionPane.showMessageDialog(this, result);
        }

        JOptionPane.showMessageDialog(this, "Sent: " + returnTotalMessages() + " messages.");
    }

    public static String sendMessageFlowWithInputs(String recipient, String messageText) {
        if (!checkRecipientCell(recipient)) {
            return "Invalid phone number format.";
        }

        if (messageText.length() > 250) {
            return "Message too long.";
        }

        String messageID = generateMessageID();
        String hash = createMessageHash(messageID, messageCounter, messageText);

        String[] options = {"Send", "Disregard", "Store"};
        int choice = JOptionPane.showOptionDialog(null, "Message: \"" + messageText + "\"\nChoose an action:",
                "Message " + messageCounter, JOptionPane.DEFAULT_OPTION,
                JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

        switch (choice) {
            case 0 -> {
                messages.add("Message ID: " + messageID + "\nHash: " + hash +
                        "\nTo: " + recipient + "\nMessage: " + messageText);
                messageCounter++;
                return "Message sent.";
            }
            case 1 -> {
                return "Message disregarded.";
            }
            case 2 -> {
                storeMessageToJSON(messageID, messageCounter, recipient, messageText, hash);
                return "Message stored in JSON.";
            }
            default -> {
                return "No action taken.";
            }
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            // Ignore or log
        }

        /* Launch the GUI ONCE */
        java.awt.EventQueue.invokeLater(() -> new MessageMenu().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
